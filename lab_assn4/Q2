#include <iostream>
using namespace std;

class CircularQueue {
    int arr[MAX];
    int front, rear;
public:
    CircularQueue() { 
        front = -1; 
        rear =-1; }

    bool isEmpty() {
         return front== -1; }
    bool isFull() {
          return (front ==0 &&rear==MAX-1)|| (front==rear+1); }

    void enqueue(int x) {
        if (isFull()) {
            cout<<"Queue Full\n";}
        else {
            if (front==-1) {
               front = 0;}
            rear =(rear+ 1)% MAX;
            arr[rear] =x;
            cout << x<<"enqueued\n";
        }
    }

    void dequeue() {
        if (isEmpty()) {
             cout<<"Queue Empty\n";}
        else {
            cout<<arr[front]<<"dequeued\n";
            if (front==rear){
               front = rear= -1;}
            else {
              front=(front +1) % MAX;}
        }
    }

    void peek() {
        if (isEmpty()){
           cout<<"Queue Empty\n";}
        else{
         cout <<"Front element:"<<arr[front]<<endl;
           }
    }

    void display() {
        if (isEmpty()) {
           cout<<"Queue Empty\n";}
        else {
            cout<<"Queue:";
            int i=front;
            while (true) {
                cout<<arr[i]<< " ";
                if (i==rear) break;
                i = (i+1) % MAX;
            }
            
        }
    }
};

int main() {
    CircularQueue cq;
    cq.enqueue(10);
    cq.enqueue(20);
    
    cq.display();
    cq.dequeue();
    cq.display();

    cq.peek();
    cq.enqueue(40);
    cq.enqueue(50);
    cq.enqueue(60);

    cq.display();
    cq.dequeue();
    cq.enqueue(70);
    cq.display();
}
